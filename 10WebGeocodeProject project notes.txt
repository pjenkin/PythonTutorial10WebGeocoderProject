Order of steps:


https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.DataFrame.to_html.html            return self.dataframe.to_html(classes='geocoded')
https://docs.python.org/3/library/unittest.html - Address & Name? Address present check? known geocoding result? dataframe html or is this testing pandas?
iterator/generator over CSV ? https://stackoverflow.com/questions/519633/lazy-method-for-reading-big-file-in-python
OOP - class WebGeocoder - upload()  download()  geocode()
CSS - colours, font sizes
name of CSS file - https://stackoverflow.com/questions/4831660/default-css-filename https://www.lifewire.com/naming-css-style-sheet-files-3466881 - no definite convention - sometimes complex/large apps will have separate layout.css (for position) design.css (for colour, size &c), and maybe my_subpage.css eg for separate pages
https://html.com/tags/doctype/  start with <!DOCTYPE html>
Color Picker  http://www.iconico.com/colorpic/gettingStarted.aspx  - but only about 10 colour picks for free 


TODO: shift first commits to develop branch

(1) app = Flask(__name__); - had to be declared outside class; (2) Flask @app.route def-s for render_template cannot be declared as methods of a class: must be outside class; (3) app = Flask(__name__) at top and if __name__ == '__main__':    app.run(debug=True) at bottom
WebGeocoder class put into separate file webgeocoder.py and imported - upload(file) method checked simply by printing filename in console. Could test this.

TODO Flask testing - https://pythonhosted.org/Flask-Testing/ - 



{{myvar|safe}}  - |safe flag if jinja 2'ing HTML string into page (HTML escaped otherwise)

isinstance - to test whether variable has been set yet to a Pandas Dataframe
self.dataframe.columns = map(str.lower, self.dataframe.columns)          # series/column names to lower case https://stackoverflow.com/a/36362607

    def geocode_dataframe(self):
        if not isinstance(self.dataframe, pandas.DataFrame):                # https://stackoverflow.com/a/14809149
            raise Exception('Dataframe not yet initialised: import CSV to proceed')
        if not 'address' in self.dataframe.columns and not 'Address' in self.dataframe.columns:
            raise Exception('No Address or address column in CSV')
        self.dataframe.columns = map(str.lower, self.dataframe.columns)
        # series/column names to lower case https://stackoverflow.com/a/36362607

        nom = Nominatim()
        self.dataframe['Latitude'], self.dataframe['Longitude'] = zip(*self.dataframe['address'].apply(nom.geocode).apply(lambda record: (record.latitude, record.longitude) ))
        # lambda assignation of lat/lng in geocoded dataframe https://stackoverflow.com/a/31414616
	# unpacking lat/lng tuple using zip and * https://stackoverflow.com/a/43009150

        self.dataframe.columns = map(str.title, self.dataframe.columns)
        # set to initial - really should restore to whatever previously

TODO https://stackoverflow.com/questions/50284753/warning-message-while-running-flask/50285851  Environment:production   & .env file


            return self.dataframe.to_csv(index=False)
  
@app.route('/download')
def download():
    print('In download')
    geocoded_filename = 'geocoded_' + webgeocoder.get_uploaded_filename()
    print(geocoded_filename)
    response = make_response(webgeocoder.download_csv_from_dataframe())
    response.headers['Content-Disposition'] = 'attachment; filename=' + geocoded_filename
    response.headers['Content-Type'] = 'text/csv'
    return response
    # Flask download CSV from pandas dataframe - https://stackoverflow.com/a/38635222

28/3/19

NB pandas Dataframe direct from list or dictionary https://pbpython.com/pandas-list-dict.html

child templates 10-145 - trouble getting flask child/parent blocks to display - layout.html in which to house index, map, graph &c - render child('index.html') (extends layout) not parent 

pip3 install gunicorn

TODO: packages - developing https://www.pythoncentral.io/how-to-create-a-python-package/   -   https://python-packaging.readthedocs.io/en/latest/


heroku 10-148 et seq
requirements.txt Profile runtime.txt

C:\Users\peter.DESKTOP-3GCVT7E\source\repos\Python\python mega course\10WebGeocoderProject>git add runtime.txt

C:\Users\peter.DESKTOP-3GCVT7E\source\repos\Python\python mega course\10WebGeocoderProject>git add requirements.txt

C:\Users\peter.DESKTOP-3GCVT7E\source\repos\Python\python mega course\10WebGeocoderProject>git add Procfile

C:\Users\peter.DESKTOP-3GCVT7E\source\repos\Python\python mega course\10WebGeocoderProject>git commit -am "22-241 Prep for Heroku push"
[master 1cbe4c2] 22-241 Prep for Heroku push
 4 files changed, 102 insertions(+), 3 deletions(-)
 create mode 100644 Procfile
 create mode 100644 requirements.txt
 create mode 100644 runtime.txt

C:\Users\peter.DESKTOP-3GCVT7E\source\repos\Python\python mega course\10WebGeocoderProject>heroku git:remote --app pnj-python-web-geocoder
 »   Warning: heroku update available from 7.18.9 to 7.20.1
set git remote heroku to https://git.heroku.com/pnj-python-web-geocoder.git

C:\Users\peter.DESKTOP-3GCVT7E\source\repos\Python\python mega course\10WebGeocoderProject>git push heroku
Enumerating objects: 79, done.
Counting objects: 100% (79/79), done.
Delta compression using up to 4 threads
Compressing objects: 100% (71/71), done.
Writing objects: 100% (79/79), 857.64 KiB | 8.75 MiB/s, done.
Total 79 (delta 36), reused 0 (delta 0)
remote: Compressing source files... done.
remote: Building source:
remote:
..... and so on (forgot to 'git feeze > requirements' from venv, from ordinary prompt instead, so lots of unecessary global packages (compressed to 178Mb?) went onto Heroku - oops - git push'ing a corrected requirements.txt led to Heroku uninstalling surplus pakages)

https://pnj-python-web-geocoder.herokuapp.com/

python -m unittest discover   - need to have 'test' at start of filename by default e.g. test_webgeocoder.py - python -m unittest test_webgeocoder      if not discovered

Output if Pyunit test(s) passing:
Ran 1 test in 0.005s
OK


for Flask testing:    https://urllib3.readthedocs.io/en/latest/    https://pythonhosted.org/Flask-Testing/  https://damyanon.net/post/flask-series-testing/
pip3 install urllib3
pip3 freeze > requirements.txt
... uninstalled urllib3 & flask_testing and ran pip3 freeze > requirements.txt    again

NB @classmethod    https://www.programiz.com/python-programming/methods/built-in/classmethod

TODO: pickling & scraping  - eg pandas.Dataframe().to_pickle() or pickle.dump() - serialised to a file a bit like JSON; other rival formats eg parquet https://pandas.pydata.org/pandas-docs/stable/reference/frame.html#serialization-io-conversion - various filename extensions e.g. .p .pik .pickle https://stackoverflow.com/a/44930921 - NB non IO serialisation e.g. pandas.Dataframe().to_dict()

        str_bytes = bytes(csv_string, 'utf-8')

        print('bytes: ' + bytes.decode(str_bytes))
        # bytes = b'''ID, address, People
        # 1,44 Mead Crescent Southampton, 4
        # 2, 67 Trevingey Road, 3
        # 3, 66 Mount Pleasant Road Camborne,2'''

        # self.app.post('/', data=dict(file_name=file))

        data = {'name':'some name'}
        data['file_name']=(BytesIO(str_bytes), test_file_name)
        # https: // stackoverflow.com / a / 35712344

        # self.app.post('/', data=dict(file_name=file), content_type='multipart/form-data')
        self.app.post('/', data=data, content_type='multipart/form-data')
        # POST to index, using 'frankenstein file'   http://flask.pocoo.org/docs/0.12/testing/


        downloaded_file = self.app.get('/download')

DeprecationWarning: Using Nominatim with the default "geopy/1.19.0" `user_agent` is strongly discouraged, as it violates Nominatim's ToS https://operations.osmfoundation.org/policies/nominatim/ and may possibly cause 403 and 429 HTTP errors. Please specify a custom `user_agent` with `Nominatim(user_agent="my-application")` or by overriding the default `user_agent`: `geopy.geocoders.options.default_user_agent = "my-application"`. In geopy 2.0 this will become an exception.    ?? https://stackoverflow.com/a/16634024 ??

29/3/18

Folium map
    # ._repr_html_()  to render map HTML in iframe   -  .get_root().render() to render whole page in HTML     
    # - https://github.com/python-visualization/folium/issues/781#issuecomment-347907408

Folium map tile types: https://deparkes.co.uk/2016/06/10/folium-map-tiles/
            atlas = folium.Map(location=[51, -4], zoom_start=7, tiles='mapquestopen', attr='http://open.mapquest.co.uk/')   - NB attr/attribution of tile source
            # tiles attribution - https://stackoverflow.com/a/52172546

renamed 'map' variable to 'atlas' (and to atlas.html) as confusion with standard map function and map route function was occurring.

TODO Need to do stuff such as try to check/keep using dataframe if user navigated away from & back to home page - stick to MVP, basic map working, so get basic Bokeh chart working too.


Bokeh 17 et seq and 20-227
TODO: figure out apply and map (and lambda functions)

added in WebGeocoder:-
    def calculate_distance_from_reference_location(self, address):
        try:
            print('in calculate_distance_from_reference_location')
            self.set_reference_address(address)
            reference_latitude, reference_longitude = self.get_reference_address_location()    # tuple of lat,lng
            self.dataframe['reference_latitude'] = reference_latitude
            self.dataframe['reference_longitude'] = reference_longitude
            # NB pandas won't allow assignation of tuples to columns  https://stackoverflow.com/a/34811984

            self.dataframe['reference_distance'] = ''
            # dataframe.iterrows wasn't effecting a new column where needed

            # awkward using tuples with a dataframe - iterating for the mo - could do this maybe with a lambda function
            for index, row in self.dataframe.iterrows():       # https://stackoverflow.com/a/16476974
                reference_location = (row['reference_latitude'], row['reference_longitude'])
                target_location = (row['latitude'], row['longitude'])
                reference_distance = distance.distance(reference_location, target_location).kilometers
                print(reference_distance)
                self.dataframe.loc[index, 'reference_distance'] = reference_distance
                # index and loc within iterrows loop https://stackoverflow.com/a/25478896

            with pandas.option_context('display.max_rows', None, 'display.max_columns', None):
                print(self.dataframe)       # https://stackoverflow.com/a/30691921

            print('added reference_distance data')
        except Exception as exception:
            print(exception)


            with pandas.option_context('display.max_rows', None, 'display.max_columns', None):
                print(self.dataframe)       # diagnostic - print whole dataframe - https://stackoverflow.com/a/30691921


then as diagnostic checking produced graph, and to adjust, using     output_file('checking-CSV-scatter.html'); show(fig)

To embed graph into page on web (as per 20-227)
in graph.html :-
{% extends "layout.html" %}

{% block content %}

<link rel="stylesheet" href={{cdn_css|safe}} type="text/css" />
<script type="text/javascript" src={{cdn_javascript}}|safe></script>


<div class="container">
    <p>Graph to correlate organisation's number of employees and distance from the centre of San Francisco, CA, USA</p>
    <p>Graph here</p>
    <p>{{error_html|safe}}</p>
</div>

{{script1|safe}}
{{div1|safe}}
<!--  safe pipe so that code included is not escape'd -->

{% endblock %}

added to start of /graph route:-
    from bokeh.embed import components
    from bokeh.resources import CDN

added to end of /graph route:-
            script1, div1 = components(fig)
            cdn_javascript = CDN.js_files[0]
            cdn_css = CDN.css_files[0]


    # return render_template('graph.html', error_html=error_html)
    return render_template('graph.html', error_html=error_html, script1=script1,
                           div1=div1, cdn_css=cdn_css, cdn_javascript=cdn_javascript)

puzzling - couldn't see chart and made some edits on master to try to diagnose - then using F12 turned out chart has been there (all along probably) in div with class="bk-canvas events"   

css styling got chart visible eventually


edited / home route to check whether dataframe populated but showing up after window closed & reopened
(also showing reference_distance and other unwanted data - make temporary?) (see next day)
https://stackoverflow.com/questions/37227780/flask-session-persisting-after-close-browser

pip3 install flask_socketio - not used for on 'disconnect' after all - cf Node.js SocketIO ?

30/3/19

Problem of either (i) dataframe not persisting when index GET page navigated back to, and/or (ii) if dataframe persisted in GET, data possibly displayed from previous session/user (?) when opening index page anew
in '/' route (GET):-

    if isinstance(request.referrer, str):
        referrer_last_part = request.referrer.split('/')[-1]
    else:
        referrer_last_part = str(None)
    print('last part: ' + referrer_last_part)

    if referrer_last_part == 'atlas' or referrer_last_part == 'graph':
        inline_visibility_flag_tag = 'class="currently-visible"'
    else:
        inline_visibility_flag_tag = ''

    if isinstance(webgeocoder.get_dataframe(), pandas.DataFrame):
        try:
            result_html = webgeocoder.get_html_from_dataframe()
            print(result_html)
            return render_template('index.html', result_html=result_html, btn='download.html', file_name=webgeocoder.get_uploaded_filename(), inline_visibility_flag_tag=inline_visibility_flag_tag)
        except Exception as exception:
            print(exception)
            return render_template('index.html', result_html=str(exception))


    # return render_template('index.html')
    return render_template('index.html', inline_visibility_flag_tag=inline_visibility_flag_tag)
    # TODO - after navigating away from page, if dataframe populated, no table shown: could check for dataframe on GET


also in '/' route (POST):-

        inline_visibility_flag_tag = 'class="currently-visible"'
        return render_template('index.html', result_html=result_html, btn='download.html', file_name=webgeocoder.get_uploaded_filename(), inline_visibility_flag_tag=inline_visibility_flag_tag)


and in index.html:-
        <form action="{{url_for('index_success_table')}}"  method="POST" enctype="multipart/form-data">
            <p class="form">Please upload your CSV file. The values containing addresses should be in a column named <em>address</em> or <em>Address</em></p>
            <input type="file" name="file_name" title="Choose file" class="form file"/> <button type="submit" class="form file">Submit</button>
            <div class="normally-invisible"><div {{inline_visibility_flag_tag|safe}}>
                <div class="file_name">{{file_name}}</div>
            </div></div>
            <br>
            <div class="normally-invisible"><div {{inline_visibility_flag_tag|safe}}>{{result_html|safe}}</div></div>     <!-- need |safe pipe as incoming would be *otherwise escape'd* HTML string -->
        </form>
        <div class="normally-invisible"><div {{inline_visibility_flag_tag|safe}}>
        {% include btn ignore missing %}
        </div></div>

and in  main.css:-
.normally-invisible {
    visibility:hidden;
}

.currently-visible {
    visibility:visible;
}


NB problem: graph and atlas (sometimes) showing last data used - workaround by inserting inline style/css for links for graph and atlas so that initially grey-ed out but thereafter usable 

    inline_disability_flag_property = 'style="pointer-events:auto;color: #444;font-style:normal;opacity:1;"'
    # all pages safely navigable once data has been loaded - could use global constant

    if referrer_last_part == 'atlas' or referrer_last_part == 'graph':
        # inline_visibility_flag_tag = 'class="currently-visible"'
        inline_visibility_flag_property = 'style="visibility: visible;"'
        inline_disability_flag_property = 'style="pointer-events:auto;color: #444;font-style:normal;opacity:1;"'
        # use inline style to avoid messing up any class definitions
    else:
        inline_visibility_flag_property = ''
        inline_disability_flag_property = ''


    if isinstance(webgeocoder.get_dataframe(), pandas.DataFrame):
        try:
            result_html = webgeocoder.get_html_from_dataframe()
            print(result_html)
            return render_template('index.html', result_html=result_html, btn='download.html',
                                   file_name=webgeocoder.get_uploaded_filename(),
                                   inline_visibility_flag_property=inline_visibility_flag_property,
                                   inline_disability_flag_property=inline_disability_flag_property)



          <ul class="menu">
            <li><a href="{{url_for('index')}}">Home</a> </li>
            <li><a href="{{url_for('atlas')}}" {{inline_disability_flag_property|safe}}
                   title="Please upload address data to see map"
                   alt="Please upload address data to see map"
                   class="normally-deactivated">Map</a> </li>
            <li><a href="{{url_for('graph')}}" {{inline_disability_flag_property|safe}}
                   title="Please upload address, name and number of employees data to see map"
                   alt="Please upload address, name and number of employees data to see map"
                   class="normally-deactivated">Graph</a> </li>
              <!-- TODO: CRUD with SQLite -->
          </ul>

NB workaround still will leave a blank home page table area if F5 pressed after data loaded!


NB labels applied to Bokeh scatter plot figure

            source = ColumnDataSource(data=dict(reference_distance=webgeocoder.get_dataframe()['reference_distance'],
                                        employees=webgeocoder.get_dataframe()['employees'],
                                        name=webgeocoder.get_dataframe()['name']
                                        ))
            labels = LabelSet(x='reference_distance', y='employees', text='name', x_offset=0, y_offset=5,
                              source=source, render_mode='canvas')

            fig.add_layout(labels)







